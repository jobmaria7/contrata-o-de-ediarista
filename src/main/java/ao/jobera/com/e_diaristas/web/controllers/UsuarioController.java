package ao.jobera.com.e_diaristas.web.controllers;import ao.jobera.com.e_diaristas.core.exceptions.SenhasNaoConferemException;import ao.jobera.com.e_diaristas.web.DTOs.FlashMessage;import ao.jobera.com.e_diaristas.web.DTOs.UsuarioCadastroForm;import ao.jobera.com.e_diaristas.web.DTOs.UsuarioEditadoForm;import ao.jobera.com.e_diaristas.web.services.WebUsuarioService;import jakarta.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.mvc.support.RedirectAttributes;@Controller@RequestMapping("/admin/usuario")public class UsuarioController {    @Autowired    private WebUsuarioService usuarioService;    @GetMapping    public ModelAndView mostrarTodos() {        var modelAndView = new ModelAndView("/admin/usuarios/_list");        modelAndView.addObject("usuarios", usuarioService.buscarTodos());        return modelAndView;    }    @GetMapping("/cadastrar")    public ModelAndView cadastrar() {        var modelAndView = new ModelAndView("/admin/usuarios/_cadastrar");        modelAndView.addObject("cadastroForm", new UsuarioCadastroForm());        return modelAndView;    }    @PostMapping("/cadastrar")    public String cadastrar(@ModelAttribute("cadastroForm") @Valid UsuarioCadastroForm cadastroForm, BindingResult result, RedirectAttributes attrs) {        if (result.hasErrors()) {            return "/admin/usuarios/_cadastrar";        }        try {            usuarioService.cadastrar(cadastroForm);            attrs.addFlashAttribute("alert", new FlashMessage("alert-success", "Usuário cadastrado com sucesso!"));        }catch (SenhasNaoConferemException e){            result.addError(e.getFieldError());            return "/admin/usuarios/_cadastrar";        }        return "redirect:/admin/usuario";    }    @GetMapping("/{id}/editar")    public ModelAndView editarUsuario(@PathVariable Long id) {        var modelAndView = new ModelAndView("/admin/usuarios/_editar");        modelAndView.addObject("editarUsuario", usuarioService.buscarUsuarioPorId(id));        return modelAndView;    }    @PostMapping("/{id}/editar")    public String editarUsuario(@PathVariable Long id, @ModelAttribute("editarUsuario") @Valid UsuarioEditadoForm editarUsuario, BindingResult result, RedirectAttributes attrs) {        if (result.hasErrors()) {            return "/admin/usuarios/_editar";        }        usuarioService.editar(editarUsuario, id);        attrs.addFlashAttribute("alert", new FlashMessage("alert-success", "Usuário editado com sucesso!"));        return "redirect:/admin/usuario";    }    @GetMapping("/{id}/excluir")    public String excluir(@PathVariable Long id, RedirectAttributes attrs) {        usuarioService.excluirPorId(id);        attrs.addFlashAttribute("alert", new FlashMessage("alert-success", "Usuário excluido com suceso!"));        return "redirect:/admin/usuario";    }}