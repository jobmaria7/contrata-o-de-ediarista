package ao.jobera.com.e_diaristas.web.services;import ao.jobera.com.e_diaristas.core.exceptions.SenhasNaoConferemException;import ao.jobera.com.e_diaristas.core.exceptions.UsuarioNaoEncontradoException;import ao.jobera.com.e_diaristas.core.models.Usuario;import ao.jobera.com.e_diaristas.core.models.enums.TipoUsuario;import ao.jobera.com.e_diaristas.core.repository.UsuarioRepository;import ao.jobera.com.e_diaristas.web.DTOs.UsuarioCadastroForm;import ao.jobera.com.e_diaristas.web.DTOs.UsuarioEditadoForm;import ao.jobera.com.e_diaristas.web.mappers.WebUsuarioMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.validation.FieldError;import java.util.List;@Servicepublic class WebUsuarioService {    @Autowired    private UsuarioRepository repository;    @Autowired    private WebUsuarioMapper mapper;    public List<Usuario> buscarTodos() {        return repository.findAll();    }    public Usuario cadastrar(UsuarioCadastroForm form) {        var senha = form.getSenha();        var confirmSenha = form.getConfirmSenha();        if (!senha.equals(confirmSenha)) {            var message = "A confirmação de senha incorreta, tente novamente!";            var fieldErro = new FieldError(form.getClass().getName(), "confirmSenha", form.getConfirmSenha(), false, null, null, message);            throw new SenhasNaoConferemException(message, fieldErro);        }        var model = mapper.toModel(form);        model.setTipoUsuario(TipoUsuario.ADMIN);        return repository.save(model);    }    public Usuario buscarPorId(Long id) {        var menssagem = String.format("O usuário com o ID %d não encontrado!", id);        return repository.findById(id).orElseThrow(() -> new UsuarioNaoEncontradoException(menssagem));    }    public UsuarioEditadoForm buscarUsuarioPorId(Long id) {        var usuario = buscarPorId(id);        return mapper.toForm(usuario);    }    public Usuario editar(UsuarioEditadoForm editarFormId, Long id) {        var usuario = buscarPorId(id);        var model = mapper.toModel(editarFormId);        model.setId(usuario.getId());        model.setSenha(usuario.getSenha());        model.setTipoUsuario(usuario.getTipoUsuario());        return repository.save(model);    }    public void excluirPorId(Long id) {        var usuario = buscarPorId(id);        repository.delete(usuario);    }}